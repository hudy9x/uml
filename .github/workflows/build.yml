name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above)
            args: '--target aarch64-apple-darwin'
          # - platform: 'macos-latest' # for Intel based macs
          #   args: '--target x86_64-apple-darwin'
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: pnpm install

      # Generate version start ----------------------------------
      - name: Get last commit for .version-lock file
        id: get_last_commit
        shell: bash
        run: |
          # Try to download the lastcommit file
          OLD_LAST_COMMIT=""
          if curl -s -f -L "https://github.com/${{ github.repository }}/releases/latest/download/lastcommit" -o lastcommit; then
            OLD_LAST_COMMIT=$(cat lastcommit)
            echo "Found previous last commit: $OLD_LAST_COMMIT"
          else
            # If file not found, get the latest commit
            OLD_LAST_COMMIT=$(git rev-parse HEAD)
            echo "Using latest commit: $OLD_LAST_COMMIT"
          fi
          echo "OLD_LAST_COMMIT=$OLD_LAST_COMMIT" >> $GITHUB_ENV
          echo "$OLD_LAST_COMMIT" > .version-lock
          ls -l

      - name: Generate app version from package.json
        id: get_version
        # if: matrix.platform == 'macos-latest'
        shell: bash
        run: |

          # Try to download the latest.json file to get version
          VERSION=""
          if curl -s -f -L "https://github.com/${{ github.repository }}/releases/latest/download/latest.json" -o latest.json; then
            CURRENT_VERSION=$(node -p "require('./latest.json').version")
            echo "Found current version: $CURRENT_VERSION"
            
            node scripts/version-upgrade.js
            VERSION=$(node -p "require('./package.json').version")
          else
            node scripts/version-upgrade.js
            VERSION=$(node -p "require('./package.json').version")
            echo "No latest.json found, generating new version: $VERSION"
          fi
          
          echo "--------------------------------"
          echo "The current version is: $VERSION"
          echo "--------------------------------"

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      # End ----------------------------------

      # Update Tauri pubkey start ----------------------------------
      - name: Update Tauri pubkey
        env:
          TAURI_SIGNING_PUBLIC_KEY: ${{ secrets.TAURI_SIGNING_PUBLIC_KEY }}
        run: node scripts/update-tauri-pubkey.js
      # End ----------------------------------

      # Generate changelog start ----------------------------------
      - name: Generate Changelog
        id: generate_changelog
        if: matrix.platform == 'macos-latest'
        run: |
          # Read and store changelog content
          CHANGELOG_CONTENT=$(cat CHANGELOG.md)
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      # End ----------------------------------


      # Build and upload release
      - uses: tauri-apps/tauri-action@v0
        name: Build and upload release
        id: tauri_build
        timeout-minutes: 30
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: v${{ env.VERSION }}
          releaseName: 'v${{ env.VERSION }}'
          releaseBody: ${{ env.CHANGELOG }}
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      # Save last commit for the next build ----------------------------------
      - name: Upload lastcommit for the next build
        if: matrix.platform == 'macos-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_ID: ${{ steps.tauri_build.outputs.releaseId }}
        run: |
          # Get last commit from environment variable
          LAST_COMMIT=$(git rev-parse HEAD)
          # Upload lastcommit file to release
          curl \
            -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            --data-binary "$LAST_COMMIT" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=lastcommit"
      # End ----------------------------------
